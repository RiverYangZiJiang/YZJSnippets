<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// 函数类型，每个函数都有种特定的函数类型，函数的类型由函数的参数类型和返回类型组成。函数可以像其他类型一样使用，如赋值、作为其他函数入参
// 以下两个函数的类型是 (Int, Int) -&gt; Int，可以解读为:“这个函数类型有两个 Int 型的参数并返回一个 Int 型的值”。
func addTwoInts(_ a: Int, _ b: Int) -&gt; Int{
    return a + b
}

func multiplyTwoInts(_ a: Int, _ b: Int) -&gt; Int{
    return a * b
}

// 使用函数类型
var mathFunction: (Int, Int) -&gt; Int = addTwoInts
print(mathFunction(2, 3))  // 5
mathFunction = multiplyTwoInts
print(mathFunction(2, 3))  // 6

// 函数类型作为参数类型
func printMathResult(_ mathFunction: (Int, Int) -&gt; Int, _ a: Int, _ b: Int) -&gt; Void{
    print(mathFunction(a, b))
}
printMathResult(multiplyTwoInts, 1, 2)  // 2

// 函数类型作为返回类型
func stepForward(_ input: Int) -&gt; Int {
    return input + 1
}
func stepBackward(_ input: Int) -&gt; Int {
    return input - 1
}

func chooseStepFunction(_ backward: Bool) -&gt; (Int) -&gt; Int {
    return backward ? stepBackward : stepForward
}

var currentValue = 3
let moveNearerToZero = chooseStepFunction(currentValue &gt; 0)
while currentValue != 0 {
    print(currentValue)
    currentValue = moveNearerToZero(currentValue)  // 实际调用的是stepBackward
}
print("zero!")</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>1ACF6C32-EBFF-4F13-9BA2-D3B2BB1B674D</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>funcType函数类型</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
